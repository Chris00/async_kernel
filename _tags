# OASIS_START
# DO NOT EDIT (digest: 4fe3b1e748cde2cf3abb53d82e29f6dd)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library async_core
"lib/async_core.cmxs": use_async_core
"lib/async_condition.cmx": for-pack(Async_core)
"lib/async_gc.cmx": for-pack(Async_core)
"lib/async_or_error.cmx": for-pack(Async_core)
"lib/async_stream.cmx": for-pack(Async_core)
"lib/backpatched.cmx": for-pack(Async_core)
"lib/clock.cmx": for-pack(Async_core)
"lib/config.cmx": for-pack(Async_core)
"lib/debug.cmx": for-pack(Async_core)
"lib/deferred.cmx": for-pack(Async_core)
"lib/deferred_intf.cmx": for-pack(Async_core)
"lib/deferred_std.cmx": for-pack(Async_core)
"lib/execution_context.cmx": for-pack(Async_core)
"lib/handler.cmx": for-pack(Async_core)
"lib/import.cmx": for-pack(Async_core)
"lib/ivar.cmx": for-pack(Async_core)
"lib/job.cmx": for-pack(Async_core)
"lib/jobs.cmx": for-pack(Async_core)
"lib/kill_index.cmx": for-pack(Async_core)
"lib/lazy_deferred.cmx": for-pack(Async_core)
"lib/monitor.cmx": for-pack(Async_core)
"lib/pipe.cmx": for-pack(Async_core)
"lib/priority.cmx": for-pack(Async_core)
"lib/raw_deferred.cmx": for-pack(Async_core)
"lib/raw_handler.cmx": for-pack(Async_core)
"lib/raw_ivar.cmx": for-pack(Async_core)
"lib/raw_monitor.cmx": for-pack(Async_core)
"lib/raw_scheduler.cmx": for-pack(Async_core)
"lib/raw_stream.cmx": for-pack(Async_core)
"lib/scheduler.cmx": for-pack(Async_core)
"lib/std.cmx": for-pack(Async_core)
"lib/tail.cmx": for-pack(Async_core)
"lib/test.cmx": for-pack(Async_core)
"lib/throttle.cmx": for-pack(Async_core)
"lib/throttle_debug.cmx": for-pack(Async_core)
"lib/throttle_unit_tests.cmx": for-pack(Async_core)
"lib/unregister.cmx": for-pack(Async_core)
<lib/*.ml{,i}>: pkg_bin_prot
<lib/*.ml{,i}>: pkg_bin_prot.syntax
<lib/*.ml{,i}>: pkg_core
<lib/*.ml{,i}>: pkg_fieldslib
<lib/*.ml{,i}>: pkg_fieldslib.syntax
<lib/*.ml{,i}>: pkg_pa_ounit
<lib/*.ml{,i}>: pkg_pa_ounit.syntax
<lib/*.ml{,i}>: pkg_sexplib
<lib/*.ml{,i}>: pkg_sexplib.syntax
<lib/*.ml{,i}>: pkg_threads
# OASIS_STOP
<lib/*.ml{,i}>: syntax_camlp4o
